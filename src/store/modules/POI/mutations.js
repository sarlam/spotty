import _ from 'lodash'

export default {
  /**
   * Push a POI to the list.
   *
   * A POI should have a unique Id, it wont be pushed without it.
   *
   * @param state
   * @param {Object} item - the now POI to add to the collection
   * @param {String} item._id - generated id (generated by the add action
   * @param {String} item._id - the name of the POI
   * @param {{x: Number, y: Number}} item.pos - the relative position on the map
   */
  ADD_A_POI: (state, item) => {
    if (!item._id) return
    if (_.findIndex(state.list, i => i._id === item._id) === -1) {
      state.list.push(item)
    }
  },

  /**
   * remove a poi from the list
   *
   * @param state
   * @param {String|{_id:String}} item - stored _id as an Object or String
   */
  REMOVE_A_POI: (state, item) => {
    // can be undefined !
    let _id = _.isObject(item)
      ? item._id
      : item

    _.remove(state.list, i => i._id === _id)
  },

  /**
   *
   * @param state
   * @param {Object} newItem - the new item
   * @param {String} newItem._id - uniqueId
   */
  UPDATE_A_POI: (state, newItem) => {
    const oldItem = _.find(state.list, i => i._id === newItem._id)

    if (!_.isUndefined(oldItem)) {
      Object.assign(oldItem, newItem)
    }
  },

  /**
   *
   * @param state
   * @param {String|{_id:String}} item - stored _id as an Object or String
   */
  SELECT_A_POI: (state, item) => {
    // can be undefined !
    let _id = _.isObject(item)
      ? item._id
      : item

    const selected = _.find(state.list, i => i._id === _id)

    state.selectedPoi = !_.isEmpty(selected)
      ? selected
      : state.selectedPoi // do not deselect
  },

  /**
   * deselect.
   *
   * @param state
   */
  DESELECT_POI: (state) => {
    state.selectedPoi = null
  },

  PUT_IN_EDITION: (state, item) => {
    state.itemInEdition = item
  },

  CLEAR_EDITION: (state) => {
    state.itemInEdition = null
  }
}
